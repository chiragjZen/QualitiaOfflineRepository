#=========================================Appium Properties Start=========================================

#Property Name:automationName
# Which automation engine to use. Supported values are Appium (It means UIAutomation framework) and XCUITest

automationName=XCUITest

#Property Name:platformVersion
#Mobile OS version	
#e.g. platformVersion = 9.3, 10.0, 10.1 etc

#platformVersion=

#Property Name:deviceName	
#The kind of mobile device or simulator to use	iPhone Simulator, iPad Simulator, iPhone Retina 4-inch. This should be one of the valid devices returned by instruments with instruments -s devices.
#e.g. deviceName = iPhone 6s Plus
#Note: This capability is required. Although, It is ignored if UDID is passed. Please use deviceName (and optional platformVersions) if you are not using UDID for execution.

deviceName=dummydevice

#Property Name:browserName
#Name of mobile web browser to automate. Default is Safari which is only browser supported on iOS.
#e.g. browserName = Safari

#browserName=

#Property Name:newCommandTimeout
# How long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session	
# e.g. newCommandTimeout = 60

newCommandTimeout=600

#Property Name:language
#(Sim/Emu-only) Language to set for the simulator / emulator
#e.g. language = fr

#language=

#Property Name:locale
# Sim/Emu-only) Locale to set for the simulator / emulator	
#e.g. locale = fr_CA

#locale= 



#Property Name:orientation
#(Sim/Emu-only) start in a certain orientation	LANDSCAPE or PORTRAIT
#e.g. orientation = PORTRAIT

#orientation=

#Property Name:autoWebview
#Move directly into Webview context. Default false
#e.g. autoWebview = true

#autoWebview=

#Property Name:noReset
#Don’t reset app state before this session. Default false
#e.g. noReset = true

#noReset= 

#Property Name:fullReset
#Reset app state by uninstalling app instead of clearing app data. This will also remove the app after the session is complete. Default false	
#e.g. fullReset = true

#fullReset=

#Property Name:eventTimings
#Enable or disable the reporting of the timings for various Appium-internal events (e.g., the start and end of each command, etc.). Defaults to false. To enable, use true. The timings are then reported as events property on response to querying the current session. See the event timing docs for the the structure of this response.
#e.g., true
#eventTimings=

#Property Name:printPageSourceOnFindFailure
#When a find operation fails, print the current page source. Defaults to false.
#e.g., true
#printPageSourceOnFindFailure=

#Property Name:enablePerformanceLogging
#(Web and webview only) Enable Safari's performance logging (default false)
#e.g. true, false
#enablePerformanceLogging=

#=========================================iOS General Properties Start=========================================

#Property Name: calendarFormat
#Sim-only) Calendar format to set for the iOS Simulator
#e.g. calendarFormat = gregorian

#calendarFormat=

#Property Name: bundleId
#Bundle ID of the app under test. Useful for starting an app on a real device or for using other caps which require the bundle ID during test startup. To run a test on a real device using the bundle ID, you may omit the 'app’ capability, but you must provide 'udid’.
#e.g. bundleId = io.appium.TestApp

#bundleId=


#Property Name: launchTimeout
#Amount of time in ms to wait for instruments before assuming it hung and failing the session
#e.g. launchTimeout = 20000

#launchTimeout=

#Property Name: locationServicesEnabled
#(Sim-only) Force location services to be either on or off. Default is to keep current sim setting.
#e.g. locationServicesEnabled = true

#locationServicesEnabled=

#Property Name: locationServicesAuthorized
#(Sim-only) Set location services to be authorized or not authorized for app via plist, so that location services alert doesn’t pop up. Default is to keep current sim setting. Note that if you use this setting you MUST also use the bundleId capability to send in your app’s bundle ID.
#e.g. locationServicesAuthorized = true

#locationServicesAuthorized=

#Property Name: autoAcceptAlerts
#Accept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false.
#e.g. autoAcceptAlerts = true

#autoAcceptAlerts=

#Property Name: autoDismissAlerts
#Dismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false.
#e.g. autoDismissAlerts = true

#autoDismissAlerts=

#Property Name: nativeInstrumentsLib
#Use native intruments lib (ie disable instruments-without-delay).
#e.g. nativeInstrumentsLib = true

#nativeInstrumentsLib=

#Property Name: nativeWebTap
#(Sim-only) Enable “real”, non-javascript-based web taps in Safari. Default: false. Warning: depending on viewport size/ratio this might not accurately tap an element
#e.g. nativeWebTap = true

#nativeWebTap=

#Property Name: safariInitialUrl
#(Sim-only) (>= 8.1) Initial safari url, default is a local welcome page
#e.g. safariInitialUrl = https://www.github.com

#safariInitialUrl=

#Property Name: safariAllowPopups
#(Sim-only) Allow javascript to open new windows in Safari. Default keeps current sim setting
#e.g. safariAllowPopups = true

#safariAllowPopups=

#Property Name: safariIgnoreFraudWarning
#(Sim-only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting.
#e.g. safariIgnoreFraudWarning = true

#safariIgnoreFraudWarning=

#Property Name: safariOpenLinksInBackground
#(Sim-only) Whether Safari should allow links to open in new windows. Default keeps current sim setting.
#e.g. safariOpenLinksInBackground = true

#safariOpenLinksInBackground=

#Property Name: keepKeyChains	(Sim-only) Whether to keep keychains (Library/Keychains) when appium session is started/finished
#e.g. keepKeyChains = true

#keepKeyChains=

#Property Name: localizableStringsDir
#Where to look for localizable strings. Default en.lproj
#e.g. localizableStringsDir = en.lproj

#localizableStringsDir=

#Property Name: processArguments
#Arguments to pass to the AUT using instruments
#e.g. processArguments = -myflag

#processArguments=

#Property Name: interKeyDelay
#The delay, in ms, between keystrokes sent to an element when typing.
#e.g. interKeyDelay = 100

#interKeyDelay=

#Property Name: showIOSLog
#Whether to show any logs captured from a device in the appium logs. Default false
#e.g. showIOSLog = true

#showIOSLog=

#Property Name: sendKeyStrategy
#strategy to use to type test into a test field. Simulator default: oneByOne. Real device default: grouped	oneByOne, grouped or setValue
#e.g. sendKeyStrategy =setValue

#sendKeyStrategy=

#Property Name: screenshotWaitTimeout
#Max timeout in sec to wait for a screenshot to be generated. default: 10
#e.g. screenshotWaitTimeout =5

#screenshotWaitTimeout=

#Property Name: waitForAppScript
#The ios automation script used to determined if the app has been launched, by default the system wait for the page source not to be empty. The result must be a boolean	e.g. true;, target.elements().length > 0;, $.delay(5000); true;
#e.g. waitForAppScript = true

#waitForAppScript=


#Property Name: webviewConnectRetries
#Number of times to send connection message to remote debugger, to get webview. Default: 8
#e.g. webviewConnectRetries =12

#webviewConnectRetries=

#Property Name: appName
#The display name of the application under test. Used to automate backgrounding the app in iOS 9+.
#e.g. appName =UICatalog

#appName=

#=========================================iOS XCUITest Properties Start=========================================

#Property Name: wdaLocalPort
#This value if specified, will be used to forward traffic from Mac host to real ios devices over USB. Default value is same as port number used by WDA on device.
#e.g 8100

#wdaLocalPort=

#Property Name: showXcodeLog
# Whether to display the output of the Xcode command used to run the tests. If this is true, there will be lots of extra logging at startup. Defaults to false
#e.g. true

#showXcodeLog=

#Property Name: iosInstallPause
#Time in milliseconds to pause between installing the application and starting WebDriverAgent on the device. Used particularly for larger applications. Defaults to 0
#e.g. 8000

#iosInstallPause=

#Property Name: xcodeOrgId
#Apple developer team identifier string. Must be used in conjunction with xcodeSigningId to take effect.
#e.g. JWL241K123

#xcodeOrgId=

#Property Name: xcodeSigningId
#String representing a signing certificate. Must be used in conjunction with xcodeOrgId. This is usually just iPhone Developer, so the default (if not included) is iPhone Developer
#e.g. iPhone Developer

#xcodeSigningId=

#Property Name: xcodeConfigFile
#Full path to an optional Xcode configuration file that specifies the code signing identity and team for running the WebDriverAgent on the real device.
#e.g. /path/to/myconfig.xcconfig

#xcodeConfigFile=


#Property Name: updatedWDABundleId
#Bundle id to update WDA to before building and launching on real devices. This bundle id must be associated with a valid provisioning profile.
#e.g. io.appium.WebDriverAgentRunner

#updatedWDABundleId=

#Property Name: keychainPath
#Full path to the private development key exported from the system keychain. Used in conjunction with keychainPassword when testing on real devices.
#e.g. /path/to/MyPrivateKey.p12

#keychainPath=


#Property Name: keychainPassword
#Password for unlocking keychain specified in keychainPath.
#e.g. mypassword

#keychainPassword=

#Property Name: usePrebuiltWDA
#Skips the build phase of running the WDA app. Building is then the responsibility of the user. Only works for Xcode 8+. Defaults to false.
#e.g. true

#usePrebuiltWDA=


#Property Name: preventWDAAttachments
#Sets read only permissions to Attachments subfolder of WebDriverAgent root inside Xcode's DerivedData. This is necessary to prevent XCTest framework from creating tons of unnecessary screenshots and logs, which are impossible to turn off using programming interfaces provided by Apple. Setting the capability to true will set Posix permissions of the folder to 555 and false will reset them back to 755. true by default
#e.g. true

#preventWDAAttachments=

#Property Name: webDriverAgentUrl
#If provided, Appium will connect to an existing WebDriverAgent instance at this URL instead of starting a new one.
#e.g. http://localhost:8100

#webDriverAgentUrl=


#Property Name: useNewWDA
#If true, forces uninstall of any existing WebDriverAgent app on device. This can provide stability in some situations. Defaults to false.
#e.g. true

#useNewWDA=

#Property Name: wdaLaunchTimeout
#Time, in ms, to wait for WebDriverAgewnt to be pingable. Defaults to 60000ms.
#e.g. 30000

#wdaLaunchTimeout=

#Property Name: wdaConnectionTimeout
#Timeout, in ms, for waiting for a response from WebDriverAgent. Defaults to 240000ms.
#e.g. 1000

#wdaConnectionTimeout=


#Property Name: resetOnSessionStartOnly
#Whether to perform reset on test session finish (false) or not (true). Keeping this variable set to true and Simulator running (the default behaviour since version 1.6.4) may significantly shorten the duratiuon of test session initialization. Either true or false. Defaults to true
#e.g. true

#resetOnSessionStartOnly=


#Property Name: commandTimeouts
#Custom timeout(s) in milliseconds for WDA backend commands execution. This might be useful if WDA backend freezes unexpectedly or requires too much time to fail and blocks automated test execution. The value is expected to be of type string and can either contain max milliseconds to wait for each WDA command to be executed before terminating the session forcefully or a valid JSON string, where keys are internal Appium command names (you can find these in logs, look for "Executing command 'command_name'" records) and values are timeouts in milliseconds. You can also set the 'default' key to assign the timeout for all other commands not explicitly enumerated as JSON keys.
#e.g. '120000', '{"findElement": 40000, "findElements": 40000, "setValue": 20000, "default": 120000}'

#commandTimeouts=


#Property Name: wdaStartupRetries
#Number of times to try to build and launch WebDriverAgent onto the device. Defaults to 2.
#e.g. 4

#wdaStartupRetries=


#Property Name: wdaStartupRetryInterval
#Time, in ms, to wait between tries to build and launch WebDriverAgent. Defaults to 10000ms.
#e.g. 20000

#wdaStartupRetryInterval=


#Property Name: connectHardwareKeyboard
#Set this option to true in order to enable hardware keyboard in Simulator. It is set to false by default, because this helps to workaround some XCTest bugs. true or false
#e.g. true

#connectHardwareKeyboard=

#Property Name: maxTypingFrequency
#Maximum frequency of keystrokes for typing and clear. If your tests are failing because of typing errors, you may want to adjust this. Defaults to 60 keystrokes per minute.
#e.g. 30

#maxTypingFrequency=


#Property Name: simpleIsVisibleCheck
#Use native methods for determining visibility of elements. In some cases this takes a long time. Setting this capability to false will cause the system to use the position and size of elements to make sure they are visible on the screen. This can, however, lead to false results in some situations. Defaults to false, except iOS 9.3, where it defaults to true.
#e.g., true

#simpleIsVisibleCheck=

#Property Name: useCarthageSsl
#Use SSL to download dependencies for WebDriverAgent. Defaults to false
#e.g. true

#useCarthageSsl=

#Property Name: shouldUseSingletonTestManager
#Use default proxy for test management within WebDriverAgent. Setting this to false sometimes helps with socket hangup problems. Defaults to true.
#e.g. false

#shouldUseSingletonTestManager=


#Property Name: startIWDP
#Set this to true if you want to start ios_webkit_debug proxy server automatically for accessing webviews on iOS. The capatibility only works for real device automation. Defaults to false.
#e.g. true

startIWDP=true

#Property Name: allowTouchIdEnroll
#Set this to true if you want to enroll simulator for touch id. Defaults to false.
#e.g. true

#allowTouchIdEnroll=


#Property Name: realDeviceLogger
#Device logger for real devices. It could be path to deviceconsole (installed with npm install deviceconsole, a compiled binary named deviceconsole will be added to ./node_modules/deviceconsole/) or idevicesyslog (comes with libimobiledevice). Defaults to idevicesyslog
#e.g. idevicesyslog, /abs/path/to/deviceconsole


#Property Name: scaleFactor
#Simulator scale factor. This is useful to have if the default resolution of simulated device is greater than the actual display resolution. So you can scale the simulator to see the whole device screen without scrolling.
#e.g. Acceptable values for simulators running Xcode SDK 8 and older are: '1.0', '0.75', '0.5', '0.33' and '0.25', where '1.0' means 100% scale. For simulators running Xcode SDK 9 and above the value could be any valid positive float number. The capability must be of a string type.
#scaleFactor=


#Property Name: calendarAccessAuthorized
#Set this to true if you want to enable calendar access on IOS Simulator with given bundleId. Set to false, if you want to disable calendar access on IOS Simulator with given bundleId. If not set, the calendar authorization status will not be set.
#e.g., true
#calendarAccessAuthorized=


#Property Name: isHeadless
#Set this capability to true if automated tests are running on Simulator and the device display is not needed to be visible. This only has an effect since Xcode9 and only for simulators. All running instances of Simulator UI are going to be automatically terminated if headless test is started. false is the default value.
#e.g., true
#isHeadless=


#Property Name: webkitDebugProxyPort
#Local port number used for communication with ios-webkit-debug-proxy. Only relevant for real devices. The default value equals to 27753.
#e.g. 20000
#webkitDebugProxyPort=


#Property Name: useXctestrunFile
#Use Xctestrun file to launch WDA. It will search for such file in bootstrapPath. Expected name of file is WebDriverAgentRunner_iphoneos<platformVersion>-arm64.xctestrun for real device and WebDriverAgentRunner_iphonesimulator<platformVersion>-x86_64.xctestrun for simulator. One can do build-for-testing for WebDriverAgent project for simulator and real device and then you will see Product Folder like this and you need to copy content of this folder at bootstrapPath location. Since, this capability expects that you have already built WDA project, it neither check whether you have necessary dependencies to build WDA nor it try to build project. Defaults to false
#e.g., true
#useXctestrunFile=

#Property Name: absoluteWebLocations
#This capability will direct the Get Element Location command, when used within webviews, to return coordinates which are relative to the origin of the page, rather than relative to the current scroll offset. This capability has no effect outside of webviews. Default false.
#e.g., true
#absoluteWebLocations=

#Property Name: simulatorWindowCenter
#Allows to explicitly set the coordinates of Simulator window center for Xcode9+ SDK. This capability only has an effect if Simulator window has not been opened yet for the current session before it started.
#e.g. {-100.0,100.0} or {500,500}, spaces are not allowed
#simulatorWindowCenter=

#Property Name: useJSONSource
#Get JSON source from WDA and parse into XML on Appium server. This can be much faster, especially on large devices. Defaults to false.
#e.g., true
#useJSONSource=

#Property Name: shutdownOtherSimulators
#If this capability set to true and the current device under test is an iOS Simulator then Appium will try to shutdown all the other running Simulators before to start a new session. This might be useful while executing webview tests on different devices, since only one device can be debugged remotely at once due to an Apple bug. The capability only has an effect if --relaxed-security command line argument is provided to the server. Defaults to false.
#e.g. true
#shutdownOtherSimulators=


#Property Name: keychainsExcludePatterns
#This capability accepts comma-separated path patterns, which are going to be excluded from keychains restore while full reset is being performed on Simulator. It might be useful if you want to exclude only particular keychain types from being restored, like the applications keychain. This feature has no effect on real devices.
#e.g. *keychain*.db* to exclude applications keychain from being restored
#keychainsExcludePatterns=


#=========================================iOS XCUITest Properties End=========================================