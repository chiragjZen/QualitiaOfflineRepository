#=========================================Appium Properties Start=========================================

#Property Name:automationName
# Which automation engine to use	Appium (default) or Selendroid or UiAutomator2 or Espresso
#e.g. automationName=Appium

automationName=UiAutomator2

#Property Name:platformVersion
#Mobile OS version	
#e.g. platformVersion = 4.4

#platformVersion=

#Property Name:deviceName	
#The kind of mobile device or emulator to use such as Android Emulator, Galaxy S4, etc…. This capability is currently ignored, though it remains required.
#e.g. deviceName = Android Emulator

deviceName=MyAndroidDevice

#Property Name:browserName
#Name of mobile web browser to automate. Should be an empty string if automating an app instead. 'Chrome’, 'Chromium’, or 'Browser’ for Android
#e.g. browserName = Chrome

#browserName=

#Property Name:newCommandTimeout
# How long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session	
# e.g. newCommandTimeout = 60

newCommandTimeout=600

#Property Name:language
#(Emu-only) Language to set for the emulator
#e.g. language = fr

#language=

#Property Name:locale
# Emu only) Locale to set for the emulator	
#e.g. locale = fr_CA

#locale= 



#Property Name:orientation
#(Emu-only) start in a certain orientation	LANDSCAPE or PORTRAIT
#e.g. orientation = PORTRAIT

#orientation=

#Property Name:autoWebview
#Move directly into Webview context. Default false
#e.g. autoWebview = true

#autoWebview=

#Property Name:noReset
#Don’t reset app state before this session. Default false
#e.g. noReset = true

#noReset= 

#Property Name:fullReset
#Reset app state by uninstalling app instead of clearing app data. This will also remove the app after the session is complete. Default false	
#e.g. fullReset = true

#fullReset=

#Property Name:appWaitActivity
#Activity name for the Android activity you want to wait for
#e.g. appWaitActivity=SplashActivity

#Property Name:eventTimings
#Enable or disable the reporting of the timings for various Appium-internal events (e.g., the start and end of each command, etc.). Defaults to false. To enable, use true. The timings are then reported as events property on response to querying the current session. See the event timing docs for the the structure of this response.
#e.g., true

#eventTimings=

#Property Name:printPageSourceOnFindFailure
#When a find operation fails, print the current page source. Defaults to false
#e.g., true

#printPageSourceOnFindFailure=

#=========================================Android Properties Start=========================================

#appWaitActivity=

#Property Name:appWaitPackage	
#Java package of the Android app you want to wait for	
#e.g. appWaitPackage = com.example.android.myApp

#appWaitPackage=

#Property Name:appWaitDuration
#Timeout in milliseconds used to wait for the appWaitActivity to launch (default 20000)	
#e.g. appWaitDuration = 30000

#appWaitDuration= 

#Property Name:deviceReadyTimeout	
#Timeout in seconds while waiting for device to become ready	
#e.g. deviceReadyTimeout = 5

#deviceReadyTimeout=

#Property Name:androidCoverage
#Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w
#e.g. androidCoverage = com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation

#androidCoverage= 

#Property Name:enablePerformanceLogging
#(Chrome and webview only) Enable Chromedriver’s performance logging (default false)
#e.g. enablePerformanceLogging = true

#enablePerformanceLogging=

#Property Name:androidDeviceReadyTimeout
#Timeout in seconds used to wait for a device to become ready after booting
#e.g. androidDeviceReadyTimeout = 30

#androidDeviceReadyTimeout=

#Property Name:androidInstallTimeout
#Timeout in milliseconds used to wait for an apk to install to the device. Defaults to 90000	
#e.g. androidInstallTimeout=90000

#androidInstallTimeout=
 
#Property Name:adbPort
#Port used to connect to the ADB server (default 5037)
#e.g. adbPort=5037

#adbPort=

#Property Name:androidDeviceSocket
#Devtools socket name. Needed only when tested app is a Chromium embedding browser. The socket is open by the browser and Chromedriver connects to it as a devtools client.
#e.g. androidDeviceSocket= chrome_devtools_remote

#androidDeviceSocket= 

#Property Name:avd
#Name of avd to launch
#e.g. avd= api19

#avd=

#Property Name:avdLaunchTimeout
#How long to wait in milliseconds for an avd to launch and connect to ADB (default 120000)
#e.g. avdLaunchTimeout=300000

#avdLaunchTimeout=

#Property Name:avdReadyTimeout
#How long to wait in milliseconds for an avd to finish its boot animations (default 120000)
#e.g. avdReadyTimeout=300000

#avdReadyTimeout=

#Property Name:avdArgs
#Additional emulator arguments used when launching an avd	
#e.g. avdArgs=-netfast

#avdArgs=

#Property Name:useKeystore
#Use a custom keystore to sign apks, default false
#e.g. useKeystore=false

#useKeystore=

#Property Name: keystorePath
#Path to custom keystore, default ~/.android/debug.keystore	
#e.g. keystorePath=/path/to.keystore

#keystorePath=

#Property Name: keystorePassword
#Password for custom keystore
#e.g. keystorePassword=foo

#keystorePassword=

#Property Name: keyAlias
#Alias for key	
#e.g. keyAlias=androiddebugkey

#keyAlias=

#Property Name: keyPassword
#Password for key
#e.g. keyPassword=foo

#keyPassword=

#Property Name: chromedriverExecutable
#The absolute local path to webdriver executable (if Chromium embedder provides its own webdriver, it should be used instead of original chromedriver bundled with Appium)	
#e.g. chromedriverExecutable=/abs/path/to/webdriver

#chromedriverExecutable=

#Property Name: autoWebviewTimeout
#Amount of time to wait for Webview context to become active, in ms. Defaults to 2000	
#e.g. autoWebviewTimeout=4

#autoWebviewTimeout=

#Property Name: intentAction
#Intent action which will be used to start activity (default android.intent.action.MAIN)	
#e.g. intentAction=android.intent.action.MAIN

#intentAction=

#Property Name: intentCategory
#Intent category which will be used to start activity (default android.intent.category.LAUNCHER)
#e.g. intentCategory= android.intent.category.LAUNCHER

#intentCategory=

#Property Name: intentFlags
#Flags that will be used to start activity (default 0x10200000)
#e.g. intentFlags=0x10200000

#intentFlags=

#Property Name: optionalIntentArguments
#Additional intent arguments that will be used to start activity. See Intent arguments	e.g. --esn <EXTRA_KEY>, --ez <EXTRA_KEY> <EXTRA_BOOLEAN_VALUE>, etc.
#e.g. optionalIntentArguments=--esn <EXTRA_KEY>

#optionalIntentArguments=

#Property Name: dontStopAppOnReset
#Doesn’t stop the process of the app under test, before starting the app using adb. If the app under test is created by another anchor app, setting this false, allows the process of the anchor app to be still alive, during the start of the test app using adb. In other words, with dontStopAppOnReset set to true, we will not include the -S flag in the adb shell am start call. With this capability omitted or set to false, we include the -S flag. Default false
#e.g. dontStopAppOnReset=true

#dontStopAppOnReset=

#Property Name: unicodeKeyboard
#Enable Unicode input, default false
#e.g. unicodeKeyboard=true

#unicodeKeyboard=

#Property Name: resetKeyboard
#Reset keyboard to its original state, after running Unicode tests with unicodeKeyboard capability. Ignored if used alone. Default false
#e.g. resetKeyboard=true

#resetKeyboard=

#Property Name: noSign
#Skip checking and signing of app with debug keys, will work only with UiAutomator and not with selendroid, default false	
#e.g. noSign=true

#noSign=

#Property Name: ignoreUnimportantViews
#Calls the setCompressedLayoutHierarchy() uiautomator function. This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable, which is why this capability has also been implemented as a toggle-able setting as well as a capability. Defaults to false
#e.g. ignoreUnimportantViews=true

#ignoreUnimportantViews=

#Property Name: disableAndroidWatchers
#Disables android watchers that watch for application not responding and application crash, this will reduce cpu usage on android device/emulator. This capability will work only with UiAutomator and not with selendroid, default false	
#e.g. disableAndroidWatchers=true

#disableAndroidWatchers=

#Property Name: chromeOptions
#Allows passing chromeOptions capability for ChromeDriver. For more information see chromeOptions	
#e.g. chromeOptions={args: ['--disable-popup-blocking']}

#chromeOptions=

#Property Name: recreateChromeDriverSessions
#Kill ChromeDriver session when moving to a non-ChromeDriver webview. Defaults to false	
#e.g. recreateChromeDriverSessions=true

#recreateChromeDriverSessions=

#Property Name: nativeWebScreenshot
#In a web context, use native (adb) method for taking a screenshot, rather than proxying to ChromeDriver. Defaults to false
#e.g. nativeWebScreenshot=true

#nativeWebScreenshot=

#Property Name: androidScreenshotPath
#The name of the directory on the device in which the screenshot will be put. Defaults to /data/local/tmp	
#e.g. androidScreenshotPath=/sdcard/screenshots/

#androidScreenshotPath=

#Property Name: androidCoverageEndIntent
#A broadcast action implemented by yourself which is used to dump coverage into file system. Passed to -a in adb shell am broadcast -a
#e.g. com.example.pkg.END_EMMA

#androidCoverageEndIntent=

#Property Name: androidInstallPath
#The name of the directory on the device in which the apk will be push before install. Defaults to /data/local/tmp
#e.g. /sdcard/Downloads/

#androidInstallPath=

#Property Name: systemPort
#systemPort used to connect to appium-uiautomator2-server, default is 8200 in general and selects one port from 8200 to 8299. When you run tests in parallel, you must adjust the port to avoid conflicts. Read Parallel Testing Setup Guide for more details.
#e.g., 8201

#systemPort=

#Property Name: remoteAdbHost
#Optional remote ADB server host
#e.g.: 192.168.0.101

#remoteAdbHost=

#Property Name: autoGrantPermissions
#Have Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to false
#e.g true or false

#autoGrantPermissions=

#Property Name: networkSpeed
#Set the network speed emulation. Specify the maximum network upload and download speeds. Defaults to full
#e.g ['full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo'] For more details check https://developer.android.com/studio/run/emulator-commandline.html

#networkSpeed=

#Property Name: gpsEnabled
#Toggle gps location provider for emulators before starting the session. By default the emulator will have this option enabled or not according to how it has been provisioned.
#e.g true or false

#gpsEnabled=

#Property Name: isHeadless
#Set this capability to true to run the Emulator headless when device display is not needed to be visible. false is the default value. isHeadless is also support for iOS, check XCUITest-specific capabilities.

#isHeadless=